Average = mean(unique_sectors),
Median = median(unique_sectors),
Minimum = min(unique_sectors),
Maximum = max(unique_sectors))
# subset data for agriculture (food, fiber and other ecosystem products)
agadapt <- adaptdata[adaptdata$SectorType %in% c("Food, fiber, other ecosystem products"), ]
# how many countries mention an element type
n_cty_element_ag <- agadapt  %>%
group_by(Element) %>%
summarise(nCountries = n_distinct(Country)) %>%
arrange(-nCountries)
# how many observations per element
n_elem_type_ag <- agadapt %>%
count(Element, name="Elements")
# merge datasets
merged_df_ag <- merge(n_cty_element_ag, n_elem_type_ag, all = TRUE)
write.csv(nElements,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_nElements_aggregate.csv")
write.csv(nElements_doc,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_nElementsXdocument.csv")
write.csv(nelem_cty,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_nElementsXcountry.csv")
write.csv(cty_all_elem,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_nCountriesAllElements.csv")
write.csv(nElem_nCty,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_nElementsXnCountry.csv")
write.csv(merged_df_ag,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_nElementsXnCountry_Ag.csv")
write.csv(stats_elem_presence,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_ElemTypesMinMax.csv")
write.csv(stats_elem_count_cty,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_ElemCountsMinMax.csv")
write.csv(nelem_sec,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/nElementsXsector.csv")
write.csv(nelem_cty_sec,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_nElementsXsectorXcty.csv")
write.csv(ncty_sec_elem,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_nCountriesXsectorXelement.csv")
write.csv(ncty_sec,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_nCountriesXsector.csv")
# adjust names of the elements to match the number of total elements
long_cty_elem <- nelem_cty %>%
gather(key = "Type", value = "Value", -Country)
# adjust names of countries so that they fit on the plot
long_cty_elem$Country[grepl("Democratic Republic of the Congo", long_cty_elem$Country)] <- "Dem. Rep. of the Congo"
# remove rows with "Total elements"
long_cty_elem <- long_cty_elem[-grep("Total_Elements", long_cty_elem$Type), ]
# add elements
# Hazards (357), Systems at risk (478), Goals (64),Objectives (1271), Actions (4441), Indicators (357)
# Set factor levels for Category
long_cty_elem$Type <- factor(long_cty_elem$Type, levels = c("Hazards", "Systems", "Goals", "Objectives", "Actions", "Indicators"))
# Define break points and color labels
break_points <- c(-Inf, 0, 50, 100, 150, 200, 250, 300, 350)
color_labels <- c("0", "1-50", "51-100", "101-150", "151-200", "201-250", "251-300", "301-350")
# Generate the color_class column
long_cty_elem$color_class <- cut(long_cty_elem$Value,
breaks = break_points,
labels = color_labels,
right = TRUE, include.lowest = TRUE)
# Compute mid-points for color_labels
mid_points <- sapply(2:length(break_points), function(i) {
(break_points[i-1] + break_points[i]) / 2
})
# Adjusting for the -Inf value in the first break point
mid_points[1] <- 0
# Create the color_value column
long_cty_elem$color_value <- as.numeric(mid_points[as.numeric(long_cty_elem$color_class)])
# Define the color palette
greens <- c("#D0E9E7","#8bcac4", "#5ab4ac", "#01665e", "#004741","#00332f", "#001a18" )
colors <- c("white", greens)
fig1 <- ggplot(long_cty_elem, aes(x = Type, y = Country, fill = color_value)) +
geom_tile(aes(width = 1, height = 1), color = "grey85", size = 0.1) + # insert white line between the cells
scale_fill_gradientn(colors = colors,
breaks = mid_points,
labels = color_labels,
na.value = "white") +
scale_y_discrete(limits = rev(unique(long_cty_elem$Country))) +
theme_bw() +
guides(fill = guide_legend(direction = "horizontal", title.position = "top", keywidth = unit(1, "cm"), keyheight = unit(0.3, 'cm'))) +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x.top = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x.top = element_blank(),
axis.ticks.x.bottom = element_blank(),
legend.position = "bottom",
legend.box.background = element_rect(color = "white", size = 0.5),
legend.box.margin = margin(0, 0, 0, 0),
legend.key.width = unit(1, 'cm'),
legend.key.height = unit(0.3, 'cm'),
legend.spacing.x = unit(0.2, 'cm'),
strip.background = element_rect(fill = "white", color = "white", size = 0.1),
strip.text = element_blank()
) +
labs(fill = "") +
scale_x_discrete(position = "top")
fig1
ggsave("C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/Fig1.png", fig1, width=5, height=9)
nelem_cty_sec2 <- nelem_cty_sec
colnames(nelem_cty_sec2) <- gsub("[, ]", "_", colnames(nelem_cty_sec2))
nelem_cty_sec2 <- nelem_cty_sec2 %>%
mutate(Total = Cities__settlements__key_infrastructure +
Crosscutting +
Livelihoods__poverty__sustainable_development  +
Not_specified +
Terrestrial__freshwater_ecosystems +
Food__fiber__other_ecosystem_products +
Health__wellbeing__communities +
Ocean__coastal_ecosystems +
Water__sanitation__hygiene
)
nelem_cty_sec2 <- nelem_cty_sec2 %>%
mutate(Pc_Cities_Settlements = round((Cities__settlements__key_infrastructure / Total) * 100, 1),
Pc_Crosscutting = round((Crosscutting / Total) * 100, 1),
Pc_Livelihoods_Poverty = round((Livelihoods__poverty__sustainable_development / Total) * 100, 1),
Pc_Not_specified = round((Not_specified / Total) * 100, 2),
Pc_Terrestrial_Freshwater = round((Terrestrial__freshwater_ecosystems / Total) * 100, 1),
Pc_Food_fiber = round((Food__fiber__other_ecosystem_products / Total) * 100, 1),
Pc_Health_Wellbeing = round((Health__wellbeing__communities / Total) * 100, 1),
Pc_Ocean_Coastal = round((Ocean__coastal_ecosystems / Total) * 100, 1),
Pc_Water_Sanitation = round((Water__sanitation__hygiene / Total) * 100, 1))
nelem_cty_sec2 <- nelem_cty_sec2[, c(1, 11:20)]
nelem_cty_sec2 <- nelem_cty_sec2 %>%
arrange(desc(Total))
write.csv(nelem_cty_sec2,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/ED_Table2.csv")
write.csv(nelem_sec,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_nElementsXsector.csv")
View(nelem_cty_sec)
View(n_cty_element)
View(ncty_sec_elem)
View(nelem_sec)
knitr::opts_chunk$set(echo = TRUE)
merged_table <- merge(ncty_sec_elem, n_elem_sec[, c("SectorType", "Total_Elements")], by = "SectorType", all.x = TRUE)
merged_table <- merge(ncty_sec_elem, nelem_sec[, c("SectorType", "Total_Elements")], by = "SectorType", all.x = TRUE)
View(merged_table)
percentage_df <- merged_table
percentage_df[, 2:7] <- percentage_df[, 2:7] / 53  # Divide each value in columns 2 to 7 by 53
percentage_df$Total_Elements <- percentage_df$Total_Elements / 7686  # Divide Total_Elements by 7686
merged_table$Total_Elements <- as.numeric(merged_table$Total_Elements)
percentage_df <- merged_table
percentage_df[, 2:7] <- percentage_df[, 2:7] / 53  # Divide each value in columns 2 to 7 by 53
percentage_df$Total_Elements <- percentage_df$Total_Elements / 7686  # Divide Total_Elements by 7686
View(percentage_df)
merged_table <- merge(ncty_sec_elem, nelem_sec[, c("SectorType", "Total_Elements")], by = "SectorType", all.x = TRUE)
merged_table$Total_Elements <- as.numeric(merged_table$Total_Elements)
percentage_df <- merged_table
percentage_df[, 2:7] <- round(percentage_df[, 2:7] / 53, 2)  # Divide each value in columns 2 to 7 by 53
percentage_df$Total_Elements <- round(percentage_df$Total_Elements / 7686, 2)  # Divide Total_Elements by 7686
View(percentage_df)
write.csv(percentage_df,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/Fig2.csv")
knitr::opts_chunk$set(echo = TRUE)
library(circlize)
library(ggplot2)
links <- read.csv(file = "C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/adaptation-tracking-africa/Data-Processed/LinkagesMatrix.csv", header = TRUE)
#links_full <- read.csv(file = "Data-Raw/LinkagesRaw.csv", header = TRUE)
rownames(links) <- make.unique(links$X)
links$X <- NULL
View(links)
# create matrix
mylinks <- as.matrix(links)
lower_triangular <- lower.tri(mylinks)
mylinks[upper.tri(mylinks)] <- 0
print(mylinks)
# Set colors for the plot
set.seed(999)
colors <- c("Hazard" = "#c7eae5",
"System at risk" =  "#5ab4ac",
"Goal" = "#01665e",
"Objective" =  "#8c510a",
"Action" = "#d8b365",
"Indicator" = "#f6e8c3")
# Create an image to store the graphic data. Adjust the file path to
png("C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/Fig3.png", width = 4, height = 4, units = "in", res = 330, bg = "transparent") #create the image to store the plot
# Plot
circos.par(gap.after = 10)
circos.par(start.degree = 20) #to start with Hazards
par(mar = c(1, 1, 1, 1))  # Adjust the margins
par(cex = 0.8)
chordDiagram(mylinks, column.col = colors, grid.col = colors, transparency = 0.3, annotationTrack = "grid", annotationTrackHeight = mm_h(1))
# Clear circular layout parameters
circos.clear()
dev.off()
knitr::opts_chunk$set(echo = TRUE)
targets <- adaptdata[!is.na(adaptdata$TargetType) & adaptdata$TargetType != "", ]
adaptdata <- read.csv(file = "C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/adaptation-tracking-africa/Data-Processed/AdaptationElementsProcessed.csv")
targets <- adaptdata[!is.na(adaptdata$TargetType) & adaptdata$TargetType != "", ]
targets <- targets[, -c(9:10, 19:24)]
# target (any type)
targets$tgt <- ifelse(targets$Target == "yes", "1", "0")
View(targets)
View(targets)
targets <- adaptdata[!is.na(adaptdata$TargetType) & adaptdata$TargetType != "", ]
targets <- targets[, -c(9:10, 19:24)]
# how many targets of each type
nTargets <- targets %>% count(TargetType, sort=TRUE)
# how many targets have a time-frame
nTargetsTime <- targets[targets$TargetType %in% c("measurable and timebound", "timebound"), ]
# how many targets have targets timeframe, by country
n_cty_time <- nTargetsTime %>%
group_by(Country) %>%
summarise(nTargetsTime = n(), .groups = 'drop')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
adaptdata <- read.csv(file = "C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/adaptation-tracking-africa/Data-Processed/AdaptationElementsProcessed.csv")
targets <- adaptdata[!is.na(adaptdata$TargetType) & adaptdata$TargetType != "", ]
targets <- targets[, -c(9:10, 19:24)]
# how many targets of each type
nTargets <- targets %>% count(TargetType, sort=TRUE)
# how many targets have a time-frame
nTargetsTime <- targets[targets$TargetType %in% c("measurable and timebound", "timebound"), ]
# how many targets have targets timeframe, by country
n_cty_time <- nTargetsTime %>%
group_by(Country) %>%
summarise(nTargetsTime = n(), .groups = 'drop')
tgt_sector <- targets %>%
group_by(Country, SectorType) %>%
summarise(count = n()) %>%
spread(key = SectorType, value = count, fill = 0)
# how many countries have targets (any type)
n_cty <- targets %>%
summarise(num_countries = n_distinct(Country)) %>%
pull(num_countries)
print(n_cty)
# how many unique countries with each target type
n_cty_target <- targets %>%
group_by(TargetType) %>%
summarise(nCountries = n_distinct((Country))) %>%
arrange(-nCountries)
# table with target types and countries
nTargets_nCty <- merge(nTargets, n_cty_target, by = "TargetType")
n_cty_sector <- targets %>%
group_by(SectorType) %>%
summarise(nCountries = n_distinct(Country), .groups = 'drop')
sector_summary <- targets %>%
group_by(SectorType) %>%
summarise(nTargets = n(),
nCountries = n_distinct(Country), .groups = 'drop')
total_targets <- 2488
total_countries <- 46
sector_summary <- sector_summary %>%
mutate(pcTargets = round((nTargets / total_targets) * 100),
pcCountries = round((nCountries / total_countries) * 100))
sector_summary <- sector_summary[, c(1, 2, 4, 3, 5)]
# Targets with long, short, medium timeframes
unique_classifications <- unique(nTargetsTime$TargetTime)
print(unique_classifications)
nTargetsSLM <- nTargetsTime %>%
mutate(TimeClassification = case_when(
# Long Term
grepl("long-term|over 10 years|over15years|2040|2050|2040-2050", TargetTime) ~ "long",
# Medium Term
grepl("medium-term|2026|2027|2028|2029|2030|2035|5-10 years|10-15years|4-10 years|5-10years|2025-2030|2023-2030|2020-2025, 2025-2030, 2030 -2040|2020-2025, 2025-2030", TargetTime) ~ "medium",
# Short Term
grepl("short-term|2020|2021|2022|2023|2024|2025|1-5 years|2-5 years|3-5 years|1-4 years|0-5 years|0-3 years|1-3 years|2-3 years|1-2 years|0-2 years|0-4 years|0-6 years|2-4 years|2-4years|4-5 years|1 year|2 years|3 years|4 years|0-7 years|4-7 years|0-10 years", TargetTime) ~ "short",
# Handle specific cases that span short to medium terms
grepl("2023-2024|2022-2030|2022-2025|2021-2026|2021-2030|2019-2021|2020-2022|2020-2030|2020-2025|2015-2030|2021-2024|2021-2027|2021-2022|2023-2027|2024-2026|2021-2025|2021-2023|1-6 years", TargetTime) ~ {
ifelse(grepl("2026|2027|2028|2029|2030|5-10 years|10-15years|5-10years", TargetTime), "medium", "short")
},
TRUE ~ NA_character_  # For any unclassified rows, but you may want to inspect these
))
# how many targets of each type and how many countries
nTargetTime_cty <- nTargetsSLM %>%
group_by(TimeClassification) %>%
summarise(
number_of_targets = n(),
number_of_countries = n_distinct(Country)
) %>%
filter(!is.na(TimeClassification))
# targets for ag sector
targets_ag <- targets[targets$SectorType %in% c("Food, fiber, other ecosystem products"),]
targets_ag <- targets_ag[, c(2, 3, 4, 5, 7, 12:18)]
library(countrycode)
indicators_ag$ISO3 <- countrycode(indicators_ag$Country, "country.name", "iso3c")
indicators_ag <- indicators[indicators$SectorType == "Food, fiber, other ecosystem products", ]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
adaptdata <- read.csv(file = "C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/adaptation-tracking-africa/Data-Processed/AdaptationElementsProcessed.csv")
targets <- adaptdata[!is.na(adaptdata$TargetType) & adaptdata$TargetType != "", ]
targets <- targets[, -c(9:10, 19:24)]
# how many targets of each type
nTargets <- targets %>% count(TargetType, sort=TRUE)
# how many targets have a time-frame
nTargetsTime <- targets[targets$TargetType %in% c("measurable and timebound", "timebound"), ]
# how many targets have targets timeframe, by country
n_cty_time <- nTargetsTime %>%
group_by(Country) %>%
summarise(nTargetsTime = n(), .groups = 'drop')
tgt_sector <- targets %>%
group_by(Country, SectorType) %>%
summarise(count = n()) %>%
spread(key = SectorType, value = count, fill = 0)
# how many countries have targets (any type)
n_cty <- targets %>%
summarise(num_countries = n_distinct(Country)) %>%
pull(num_countries)
print(n_cty)
# how many unique countries with each target type
n_cty_target <- targets %>%
group_by(TargetType) %>%
summarise(nCountries = n_distinct((Country))) %>%
arrange(-nCountries)
# table with target types and countries
nTargets_nCty <- merge(nTargets, n_cty_target, by = "TargetType")
n_cty_sector <- targets %>%
group_by(SectorType) %>%
summarise(nCountries = n_distinct(Country), .groups = 'drop')
n_cty_sector <- targets %>%
group_by(SectorType) %>%
summarise(nCountries = n_distinct(Country), .groups = 'drop')
sector_summary <- targets %>%
group_by(SectorType) %>%
summarise(nTargets = n(),
nCountries = n_distinct(Country), .groups = 'drop')
total_targets <- 2488
total_countries <- 46
sector_summary <- sector_summary %>%
mutate(pcTargets = round((nTargets / total_targets) * 100),
pcCountries = round((nCountries / total_countries) * 100))
sector_summary <- sector_summary[, c(1, 2, 4, 3, 5)]
# Targets with long, short, medium timeframes
unique_classifications <- unique(nTargetsTime$TargetTime)
print(unique_classifications)
nTargetsSLM <- nTargetsTime %>%
mutate(TimeClassification = case_when(
# Long Term
grepl("long-term|over 10 years|over15years|2040|2050|2040-2050", TargetTime) ~ "long",
# Medium Term
grepl("medium-term|2026|2027|2028|2029|2030|2035|5-10 years|10-15years|4-10 years|5-10years|2025-2030|2023-2030|2020-2025, 2025-2030, 2030 -2040|2020-2025, 2025-2030", TargetTime) ~ "medium",
# Short Term
grepl("short-term|2020|2021|2022|2023|2024|2025|1-5 years|2-5 years|3-5 years|1-4 years|0-5 years|0-3 years|1-3 years|2-3 years|1-2 years|0-2 years|0-4 years|0-6 years|2-4 years|2-4years|4-5 years|1 year|2 years|3 years|4 years|0-7 years|4-7 years|0-10 years", TargetTime) ~ "short",
# Handle specific cases that span short to medium terms
grepl("2023-2024|2022-2030|2022-2025|2021-2026|2021-2030|2019-2021|2020-2022|2020-2030|2020-2025|2015-2030|2021-2024|2021-2027|2021-2022|2023-2027|2024-2026|2021-2025|2021-2023|1-6 years", TargetTime) ~ {
ifelse(grepl("2026|2027|2028|2029|2030|5-10 years|10-15years|5-10years", TargetTime), "medium", "short")
},
TRUE ~ NA_character_  # For any unclassified rows, but you may want to inspect these
))
# how many targets of each type and how many countries
nTargetTime_cty <- nTargetsSLM %>%
group_by(TimeClassification) %>%
summarise(
number_of_targets = n(),
number_of_countries = n_distinct(Country)
) %>%
filter(!is.na(TimeClassification))
# targets for ag sector
targets_ag <- targets[targets$SectorType %in% c("Food, fiber, other ecosystem products"),]
targets_ag <- targets_ag[, c(2, 3, 4, 5, 7, 12:18)]
View(targets_ag)
nTargets_ag <- targets_ag %>% count(TargetType, sort=TRUE)
write.csv(tgt_sector,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nTargetsXsectorXcountry.csv")
write.csv(nTargets_nCty,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nTargetsXnCountries.csv")
write.csv(n_cty_sector,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nCountriesTargetsXsector.csv")
write.csv(sector_summary,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nTargetsCountriesXSector.csv")
write.csv(targets_ag,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_TargetsAg.csv")
targets_mt <- targets[targets$TargetType == "measurable and timebound" & targets$SectorType == "Food, fiber, other ecosystem products", ]
targets_mt$ISO3 <- countrycode(targets_mt$Country, "country.name", "iso3c")
targets_mt <- targets_mt[, c(3, 4, 5, 7, 12:15, 25)]
targets_mt <- targets[targets$TargetType == "measurable and timebound" & targets$SectorType == "Food, fiber, other ecosystem products", ]
targets_mt$ISO3 <- countrycode(targets_mt$Country, "country.name", "iso3c")
View(targets_mt)
targets_mt <- targets_mt[, c(2:5, 7, 9: 13, 16, 17)]
View(targets_mt)
targets_mt_reorder <- targets_mt[, c(12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)]
write.csv(targets_mt_reorder,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/SI_Table2.csv")
ind_sector <- indicators %>%
group_by(SectorType) %>%
summarise(nIndicators = n(),
nCountries = n_distinct(Country), .groups = 'drop')
indicators <- adaptdata[adaptdata$Element == "Indicator", ]
ind_sector <- indicators %>%
group_by(SectorType) %>%
summarise(nIndicators = n(),
nCountries = n_distinct(Country), .groups = 'drop')
ind_cty_type <- indicators %>%
group_by(IndicatorType) %>%
summarise(nIndicators = n(),
nCountries = n_distinct(Country), .groups = 'drop')
total_indicators <- 1075
total_countries <- 18
ind_cty_type <- ind_cty_type %>%
mutate(pcIndicators = round((nIndicators / total_indicators) * 100),
pcCountries = round((nCountries / total_countries) * 100))
ind_cty_type <- ind_cty_type[, c(1, 2, 4, 3, 5)]
ind_funct <- indicators[, c("Document", "IndicatorType")]
ind_funct_doc <- ind_funct %>%
group_by(Document, IndicatorType) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Document, values_from = Count, values_fill = 0) %>%
mutate(Total = NDC + NAP,
Percentage_NDC = round((NDC / Total) * 100),
Percentage_NAP = round((NAP / Total) * 100))
columns_to_replace <- c("Specific", "Measurable", "Achievable", "Relevant", "Timebound")
# replace yes and no with 1 and 0
for (col in columns_to_replace) {
indicators[[col]] <- as.numeric(ifelse(indicators[[col]] == "yes", 1, 0))
}
# indicators and nr of criteria met
indicators$nr_criteria <- rowSums(indicators[, 20:24])
indicators_criteria_nr <- indicators %>%
group_by(nr_criteria) %>%
summarize(nr_indicators = n())
# summary statistics
summary_stats_criteria <- indicators %>%
summarise(
Average = mean(nr_criteria),
Median = median(nr_criteria),
Minimum = min(nr_criteria),
Maximum = max(nr_criteria)
)
# Indicators that meet all SMART criteria
indicators$all_criteria <- ifelse(indicators$Specific == 1 &
indicators$Measurable == 1 &
indicators$Achievable == 1 &
indicators$Relevant == 1 &
indicators$Timebound == 1, 1, 0)
indicators_smart <- indicators[indicators$SMART == 1, ]
# Number of indicators by smart criteria and country, convert from wide to long format
indicators_subset <- indicators[, c(2, 20:24)]
long_ind <- indicators_subset %>%
pivot_longer(cols = -Country, names_to = "criteria", values_to = "value")
ind_smart_cty <- long_ind %>%
group_by(criteria) %>%
summarise(
nIndicators = sum(value),
nCountries = n_distinct(Country[value == 1])
)
total_indicators <- 1075
total_countries <- 18
ind_smart_cty <- ind_smart_cty %>%
mutate(pcIndicators = round((nIndicators / total_indicators) * 100),
pcCountries = round((nCountries / total_countries) * 100))
ind_smart_cty <- ind_smart_cty[, c(1, 2, 4, 3, 5)]
ind_smart_new <- indicators[, c(3, 20:24)]
# Reshape, count, and pivot
ind_smart_doc <<- ind_smart_new %>%
pivot_longer(cols = c(Specific, Measurable, Achievable, Relevant, Timebound),
names_to = "IndicatorType", values_to = "Value") %>%
filter(Value == "yes") %>%
group_by(IndicatorType, Document) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Document, values_from = Count, values_fill = 0) %>%
mutate(Total = NDC + NAP,
Percentage_NDC = round((NDC / Total) * 100),
Percentage_NAP = round((NAP / Total) * 100))
View(indicators_subset)
ind_smart_new <- indicators[, c(3, 20:24)]
View(ind_smart_new)
ind_smart_doc <<- ind_smart_new %>%
pivot_longer(cols = c(Specific, Measurable, Achievable, Relevant, Timebound),
names_to = "IndicatorType", values_to = "Value") %>%
filter(Value == "yes") %>%
group_by(IndicatorType, Document) %>%
summarise(Count = n()) %>%
pivot_wider(names_from = Document, values_from = Count, values_fill = 0) %>%
mutate(Total = NDC + NAP,
Percentage_NDC = round((NDC / Total) * 100),
Percentage_NAP = round((NAP / Total) * 100))
#### convert from wide to long format
indicators_subset_ag <- indicators_ag[, c(2, 20:24)]
indicators_ag <- indicators[indicators$SectorType == "Food, fiber, other ecosystem products", ]
ind_cty_type_ag <- indicators_ag %>%
group_by(IndicatorType) %>%
summarise(nIndicators = n(),
nCountries = n_distinct(Country), .groups = 'drop')
unique_cty <- unique(indicators_ag$Country)
print(unique_cty)
total_indicators <- 222
total_countries <- 10
ind_cty_type_ag <- ind_cty_type_ag %>%
mutate(pcIndicators = round((nIndicators / total_indicators) * 100),
pcCountries = round((nCountries / total_countries) * 100))
ind_cty_type_ag <- ind_cty_type_ag[, c(1, 2, 4, 3, 5)]
#### convert from wide to long format
indicators_subset_ag <- indicators_ag[, c(2, 20:24)]
long_ind_ag <- indicators_subset_ag %>%
pivot_longer(cols = -Country, names_to = "criteria", values_to = "value")
ind_smart_cty_ag <- long_ind_ag %>%
group_by(criteria) %>%
summarise(
nIndicators = sum(value),
nCountries = n_distinct(Country[value == 1])
)
total_indicators <- 222
total_countries <- 10
ind_smart_cty_ag <- ind_smart_cty_ag %>%
mutate(pcIndicators = round((nIndicators / total_indicators) * 100),
pcCountries = round((nCountries / total_countries) * 100))
ind_smart_cty_ag <- ind_smart_cty_ag[, c(1, 2, 4, 3, 5)]
ind_smart_doc <- ind_smart_new %>%
pivot_longer(cols = c(Specific, Measurable, Achievable, Relevant, Timebound),
names_to = "Criteria", values_to = "Value") %>%
group_by(Criteria, Document) %>%
summarise(Total = sum(Value == 1)) %>%
pivot_wider(names_from = Document, values_from = Total, values_fill = 0)
View(ind_smart_doc)
ind_smart_doc <- ind_smart_new %>%
pivot_longer(cols = c(Specific, Measurable, Achievable, Relevant, Timebound),
names_to = "Criteria", values_to = "Value") %>%
group_by(Criteria, Document) %>%
summarise(Total = sum(Value == 1)) %>%
pivot_wider(names_from = Document, values_from = Total, values_fill = 0) %>%
mutate(Total = NDC + NAP,
Pc_NDC = round((NDC / Total) * 100, 2),
Pc_NAP = round((NAP / Total) * 100, 2))
write.csv(ind_sector,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nIndicatorXsector.csv")
write.csv(ind_cty_type,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nIndic_nCtyXtype.csv")
write.csv(ind_funct_doc,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/1_nME_nCty_doc.csv")
write.csv(ind_smart_cty,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nIndicatorsXcriteriaXcty.csv")
write.csv(indicators_criteria_nr,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nIndicatorsXnCriteria.csv")
write.csv(indicators_smart,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nIndicatorsSMART.csv")
write.csv(ind_smart_doc,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nSMART_nCty_doc.csv")
write.csv(ind_cty_type_ag,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nIndic_nCtyXtype_Ag.csv")
write.csv(ind_smart_cty_ag,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_nIndicatorsXcriteriaXcty_ag.csv")
library(countrycode)
indicators_ag$ISO3 <- countrycode(indicators_ag$Country, "country.name", "iso3c")
indicators_ag2 <- indicators_ag[, c(3, 4, 7, 19:24, 27)]
indicators_ag2 <- indicators_ag2[, c(10, 1, 2, 3, 4, 5, 6, 7, 8, 9)]
# Save table to local file
# Modify the file path to specify the location where you would like to store the table
write.csv(indicators_ag2,"C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/3_SI_Table3.csv")
