group_by(SectorCat) %>%
summarise(
Hazards = sum(Hazards > 0),
Systems = sum(Systems > 0),
Goals = sum(Goals > 0),
Objectives = sum(Objectives > 0),
Actions = sum(Actions > 0),
Indicators = sum(Indicators > 0)
)
# How many countries have an element: Summarize for all sectors
# First I need to summarize data by country (how many elements for each country;
# this has been done above and generated the dataframe "cty_elem"
# then i summarize the entire dataset
elements_ncty_all <- cty_elem %>%
summarise(
SectorCat = "All_Sectors",
Hazards = sum(Hazards > 0),
Systems = sum(Systems > 0),
Goals = sum(Goals > 0),
Objectives = sum(Objectives > 0),
Actions = sum(Actions > 0),
Indicators = sum(Indicators > 0)
)
# Append to the sector summary
elements_ncty <- bind_rows(elements_ncty_sector, elements_ncty_all)
# create a dataframe to show percentages
df_new <- elements_ncty %>%
mutate(across(-SectorCat, ~ round(.x/53*100)))
# add n (element counts) in the names of each sector
## first create a dataframe with a column of interest
sector_n <- sector_elem[, c("SectorCat", "Total_Elements")]
# merge data frames
df_merged <- merge(df_new, sector_n, by = "SectorCat")
# Modify SectorCat column
df_merged$SectorCat <- paste0(gsub("_", ", ", df_merged$SectorCat), " (", df_merged$Total_Elements, ")")
# Remove the Total_Elements column as it's no longer needed
df_merged$Total_Elements <- NULL
df_merged$SectorCat[df_merged$SectorCat == "All, Sectors (5934)"] <- "All Sectors (5934)"
# convert dataframe to long format
df_long <- df_merged %>%
gather(key = "Category", value = "Value", Hazards:Indicators)
# Set factor levels for Category
df_long$Category <- factor(df_long$Category, levels = rev(c("Hazards", "Systems", "Goals", "Objectives", "Actions", "Indicators")))
# Set factor levels for SectorCat
desired_order <- c("All Sectors (5934)", "Food, Fiber (1555)", "Cities, Infrastructure (701)", "Terrestrial, Freshwater (617)", "Water, Sanitation (549)", "Health, Wellbeing (371)", "Poverty, Livelihoods (292)", "Ocean, Coastal (243)", "Crosscutting (881)", "Undefined (725)")
df_long$SectorCat <- factor(df_long$SectorCat, levels = desired_order)
# Wrap sector names to fit within a certain width
wrapped_sector_names <- sapply(desired_order, function(name) {
str_wrap(name, width = 20)
})
levels(df_long$SectorCat) <- wrapped_sector_names
# Set colors for bars
custom_colors <- c("Hazards" = "#8bcac4", "Systems" = "#5ab4ac", "Goals" = "#01665e",
"Objectives" = "#be9130", "Actions" = "#d8b365", "Indicators" = "#f6e8c3")
fig1 <- ggplot(df_long, aes(x = Value, y = Category, fill = Category)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~SectorCat, scales = "free_y", ncol = 5) +
scale_fill_manual(values = custom_colors) +
labs(title = "",
x = "", y = "") +
theme(legend.position = "none",
panel.background = element_blank(),
panel.border = element_rect(color = "grey", fill = NA, size = 0.5),  # This line adds the grey borders
# panel.grid.major.x = element_line(color = "gray90"),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.spacing = grid::unit(2, "lines"))
fig1
# adjust names of the elements to match the number of total elements
long_cty_elem <- cty_elem %>%
gather(key = "Type", value = "Value", -Country)
# Set factor levels for Category
long_cty_elem$Type <- factor(long_cty_elem$Type, levels = c("Hazards", "Systems", "Goals", "Objectives", "Actions", "Indicators"))
# Define the breaks and corresponding labels for the color classes
break_points <- c(-Inf, 0, 50, 100, 150, 200, 250, 302, Inf)
color_labels <- c("0", "1-50", "51-100", "101-150", "151-200", "201-250", "251-302", ">302")
colors <- c("#d8b365", "#DCEFED", "#8bcac4", "#5ab4ac", "#01665e", "#004741", "#001a18", "grey")
# Classify each 'Value' into one of the specified intervals
long_cty_elem$color_class <- cut(long_cty_elem$Value,
breaks = break_points,
labels = color_labels,
right = TRUE, include.lowest = TRUE)
fig2 <- ggplot(long_cty_elem, aes(x = Type, y = Country, fill = color_class)) +
geom_tile() +
scale_fill_manual(values = colors, labels = color_labels) +
scale_y_discrete(limits = rev(unique(long_cty_elem$Country))) +
theme(
# axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5),
# axis.text.x.top = element_text(angle = 0, hjust = 0.5, vjust = 0.5),
axis.text.x.top = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x.top = element_blank(),
axis.ticks.x.bottom = element_blank(),
plot.margin = margin(5, 5, 5, 5, "pt"),
legend.position = "right"
) +
labs(fill = "") +
coord_fixed(ratio = 0.6) +
scale_x_discrete(position = "top")
fig2
fig3 <- ggplot(long_cty_elem, aes(x = Type, y = Country, fill = color_class)) +
geom_tile() +
scale_fill_manual(values = colors, labels = color_labels) +
scale_y_discrete(limits = rev(unique(long_cty_elem$Country))) +
facet_grid(. ~ Type, scales = "free", space = "free") +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.spacing = unit(0, "mm"),
# axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5),
axis.text.x.top = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x.top = element_blank(),
axis.ticks.x.bottom = element_blank(),
# plot.margin = margin(5, 5, 5, 5, "pt"),
legend.position = "right",
strip.background = element_rect(fill = "white", color = "white", size = 0.1),
strip.text = element_blank()
) +
labs(fill = "") +
scale_x_discrete(position = "top")
fig3
fig3 <- ggplot(long_cty_elem, aes(x = Type, y = Country, fill = color_class)) +
geom_raster(aes(width = 0.9, height = 0.9)) +
scale_fill_manual(values = colors, labels = color_labels) +
scale_y_discrete(limits = rev(unique(long_cty_elem$Country))) +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x.top = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x.top = element_blank(),
axis.ticks.x.bottom = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill = "white", color = "white", size = 0.1),
strip.text = element_blank()
) +
labs(fill = "") +
scale_x_discrete(position = "top")
fig3
# adjust names of the elements to match the number of total elements
long_cty_elem <- cty_elem %>%
gather(key = "Type", value = "Value", -Country)
# Set factor levels for Category
long_cty_elem$Type <- factor(long_cty_elem$Type, levels = c("Hazards", "Systems", "Goals", "Objectives", "Actions", "Indicators"))
# Define the breaks and corresponding labels for the color classes
break_points <- c(-Inf, 0, 50, 100, 150, 200, 250, 302, Inf)
color_labels <- c("0", "1-50", "51-100", "101-150", "151-200", "201-250", "251-302", ">302")
# colors <- c("#d8b365", "#DCEFED", "#8bcac4", "#5ab4ac", "#01665e", "#004741", "#001a18", "grey")
# Define a single green color scheme. Here, we will use a sequence of green shades.
# We add "grey" as the first color for value 0.
greens <- c("#f7fcf5", "#e5f5e0", "#c7e9c0", "#a1d99b", "#74c476", "#31a354", "#006d2c")
colors <- c("grey", greens)
# Classify each 'Value' into one of the specified intervals
long_cty_elem$color_class <- cut(long_cty_elem$Value,
breaks = break_points,
labels = color_labels,
right = TRUE, include.lowest = TRUE)
fig2 <- ggplot(long_cty_elem, aes(x = Type, y = Country, fill = color_class)) +
geom_tile() +
scale_fill_manual(values = colors, labels = color_labels) +
scale_y_discrete(limits = rev(unique(long_cty_elem$Country))) +
theme(
# axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5),
# axis.text.x.top = element_text(angle = 0, hjust = 0.5, vjust = 0.5),
axis.text.x.top = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x.top = element_blank(),
axis.ticks.x.bottom = element_blank(),
plot.margin = margin(5, 5, 5, 5, "pt"),
legend.position = "right"
) +
labs(fill = "") +
coord_fixed(ratio = 0.6) +
scale_x_discrete(position = "top")
fig2
# adjust names of the elements to match the number of total elements
long_cty_elem <- cty_elem %>%
gather(key = "Type", value = "Value", -Country)
# Set factor levels for Category
long_cty_elem$Type <- factor(long_cty_elem$Type, levels = c("Hazards", "Systems", "Goals", "Objectives", "Actions", "Indicators"))
# Define the breaks and corresponding labels for the color classes
break_points <- c(-Inf, 0, 50, 100, 150, 200, 250, 302, Inf)
color_labels <- c("0", "1-50", "51-100", "101-150", "151-200", "201-250", "251-302", ">302")
#colors <- c("#d8b365", "#DCEFED", "#8bcac4", "#5ab4ac", "#01665e", "#004741","#00332f", "#001a18", "grey")
# Define a single green color scheme. Here, we will use a sequence of green shades.
# We add "grey" as the first color for value 0.
greens <- c("#DCEFED", "#8bcac4", "#5ab4ac", "#01665e", "#004741","#00332f", "#001a18")
colors <- c("grey", greens)
# Classify each 'Value' into one of the specified intervals
long_cty_elem$color_class <- cut(long_cty_elem$Value,
breaks = break_points,
labels = color_labels,
right = TRUE, include.lowest = TRUE)
fig2 <- ggplot(long_cty_elem, aes(x = Type, y = Country, fill = color_class)) +
geom_tile() +
scale_fill_manual(values = colors, labels = color_labels) +
scale_y_discrete(limits = rev(unique(long_cty_elem$Country))) +
theme(
# axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5),
# axis.text.x.top = element_text(angle = 0, hjust = 0.5, vjust = 0.5),
axis.text.x.top = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x.top = element_blank(),
axis.ticks.x.bottom = element_blank(),
plot.margin = margin(5, 5, 5, 5, "pt"),
legend.position = "right"
) +
labs(fill = "") +
coord_fixed(ratio = 0.6) +
scale_x_discrete(position = "top")
fig2
fig3 <- ggplot(long_cty_elem, aes(x = Type, y = Country, fill = color_class)) +
geom_raster(aes(width = 0.9, height = 0.9)) +
scale_fill_manual(values = colors, labels = color_labels) +
scale_y_discrete(limits = rev(unique(long_cty_elem$Country))) +
theme_bw() +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x.top = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x.top = element_blank(),
axis.ticks.x.bottom = element_blank(),
legend.position = "bottom",
strip.background = element_rect(fill = "white", color = "white", size = 0.1),
strip.text = element_blank()
) +
labs(fill = "") +
scale_x_discrete(position = "top")
fig3
ggsave("C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/phd-work/chapter-1/Results/Fig2-Elements-Cty-new.png", fig3, width=5, height=9
)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/phd-work/chapter-1/")
adaptdata <- read.csv(file = "Data-Processed/AdaptDataFull.csv")
links <- read.csv(file = "Data-Processed/LinkagesMatrix.csv", header = TRUE)
#colnames(links) <- c("x", "Hazards", "Systems at risk", "Goals", "Objectives", "Actions", "Targets", "Indicators", "Data systems")
#rownames(links) <- c("x2", "Hazards", "Systems at risk", "Goals", "Objectives", "Actions", "Targets", "Indicators", "Data systems", "x3")
#links <- links[-1, ]
#links <- links[-9, ]
#links$x <- NULL
rownames(links) <- make.unique(links$X)
links$X <- NULL
colnames(links) <- links[1,]
links <- links[-1, ]
links <- links[-9, ]
Hazards <- adaptdata[adaptdata$Element %in% c("Hazard"),]
SystemsAtRisk <- adaptdata[adaptdata$Element %in% c("SystemAtRisk"),]
Goals <- adaptdata[adaptdata$Element %in% c("Goal"),]
Objectives <- adaptdata[adaptdata$Element %in% c("Objective"),]
Actions <- adaptdata[adaptdata$Element %in% c("Action"),]
Targets <- adaptdata[adaptdata$Target %in% c("yes"),]
Indicators <- adaptdata[adaptdata$Element %in% c("Indicator"),]
DataSystems <- adaptdata[adaptdata$IndSystem %in% c("yes"),]
elem_freq <- data.frame(Hazards = 15, SystemAtRisk = 15, Goals = nrow(Goals), Objectives = nrow(Objectives), Actions = nrow(Actions), Targets = nrow(Targets), Indicators = nrow(Indicators), DataSystems = nrow(DataSystems))
elem_freq <- gather(elem_freq, key = "Variable", value = "Value")
#elem_freq$Variable[elem_freq$Variable == "SystemAtRisk"] <- "Systems at risk"
# elem_freq$Variable[elem_freq$Variable ==  "DataSystem"] <- "Data systems"
myedges <- links %>%
dplyr::mutate(from = rownames(.)) %>%
tidyr::gather(to, Frequency, Hazards:DataSystems) %>%
dplyr::mutate(Frequency = ifelse(Frequency == 0, NA, Frequency))
#library(gutenbergr)
#library(igraph)
#library(Matrix)
#library(network)
#library(sna)
#library(tidygraph)
#library(tm)
library(ggraph)
library(tidyverse)
library(tibble)
library(dplyr)
setwd("C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/phd-work/chapter-1/")
adaptdata <- read.csv(file = "Data-Processed/AdaptDataFull.csv")
links <- read.csv(file = "Data-Processed/LinkagesMatrix.csv", header = TRUE)
rownames(links) <- make.unique(links$X)
links$X <- NULL
# rename Systems at risk
colnames(links)[2] <- "Systems at risk"
rownames(links)[2] <- "Systems at risk"
# create matrix
mylinks <- as.matrix(links)
# The matrix needs to be symetric, ensuring  the values on the upper triangle of the matrix match the corresponding values on the lower triangle.
# use lower.tri() function to identify the lower triangle of the matrix, and then assign the corresponding values from the transposed matrix using t(symmetric_matrix). After making these changes, the matrix will be symmetric matrix. The diagonal elements are left unchanged, assuming they represent the connection of a group to itself (which should typically be zero). I
lower_triangular <- lower.tri(mylinks)
mylinks[upper.tri(mylinks)] <- 0
print(mylinks)
# Set colors for the plot
set.seed(999)
colors <- c("Hazards" = "#c7eae5",
"Systems at risk" =  "#5ab4ac",
"Goals" = "#01665e",
"Objectives" =  "#8c510a",
"Actions" = "#d8b365",
"Indicators" = "#f6e8c3")
# Create an image to store the graphic data
png("C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/Fig4.Chordplot-noannot.png", width = 4, height = 4, units = "in", res = 300) #create the image to store the plot
# Plot
circos.par(gap.after = 10)
library(circlize)
setwd("C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/phd-work/chapter-1/")
adaptdata <- read.csv(file = "Data-Processed/AdaptDataFull.csv")
links <- read.csv(file = "Data-Processed/LinkagesMatrix.csv", header = TRUE)
rownames(links) <- make.unique(links$X)
links$X <- NULL
# rename Systems at risk
colnames(links)[2] <- "Systems at risk"
rownames(links)[2] <- "Systems at risk"
# create matrix
mylinks <- as.matrix(links)
# The matrix needs to be symetric, ensuring  the values on the upper triangle of the matrix match the corresponding values on the lower triangle.
# use lower.tri() function to identify the lower triangle of the matrix, and then assign the corresponding values from the transposed matrix using t(symmetric_matrix). After making these changes, the matrix will be symmetric matrix. The diagonal elements are left unchanged, assuming they represent the connection of a group to itself (which should typically be zero). I
lower_triangular <- lower.tri(mylinks)
mylinks[upper.tri(mylinks)] <- 0
print(mylinks)
# Set colors for the plot
set.seed(999)
colors <- c("Hazards" = "#c7eae5",
"Systems at risk" =  "#5ab4ac",
"Goals" = "#01665e",
"Objectives" =  "#8c510a",
"Actions" = "#d8b365",
"Indicators" = "#f6e8c3")
# Create an image to store the graphic data
png("C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/Fig4.Chordplot-noannot.png", width = 4, height = 4, units = "in", res = 300) #create the image to store the plot
# Plot
circos.par(gap.after = 10)
circos.par(start.degree = 20) #to start with Hazards
par(mar = c(1, 1, 1, 1))  # Adjust the margins
par(cex = 0.8)
chordDiagram(mylinks, column.col = colors, grid.col = colors, transparency = 0.3, annotationTrack = "grid", annotationTrackHeight = mm_h(1))
# Clear circular layout parameters
circos.clear()
dev.off()
knitr::opts_chunk$set(echo = TRUE)
# rename Systems at risk
colnames(links)[2] <- "Systems at risk"
rownames(links)[2] <- "Systems at risk"
# create matrix
mylinks <- as.matrix(links)
# The matrix needs to be symetric, ensuring  the values on the upper triangle of the matrix match the corresponding values on the lower triangle.
# use lower.tri() function to identify the lower triangle of the matrix, and then assign the corresponding values from the transposed matrix using t(symmetric_matrix). After making these changes, the matrix will be symmetric matrix. The diagonal elements are left unchanged, assuming they represent the connection of a group to itself (which should typically be zero). I
lower_triangular <- lower.tri(mylinks)
mylinks[upper.tri(mylinks)] <- 0
print(mylinks)
# Set colors for the plot
set.seed(999)
colors <- c("Hazards" = "#c7eae5",
"Systems at risk" =  "#5ab4ac",
"Goals" = "#01665e",
"Objectives" =  "#8c510a",
"Actions" = "#d8b365",
"Indicators" = "#f6e8c3")
# Create an image to store the graphic data
png("C:/Users/anowak/OneDrive - CGIAR/PhD/Ch1/Results/Fig4.Chordplot-noannot.png", width = 4, height = 4, units = "in", res = 300, bg = "transparent") #create the image to store the plot
# Plot
circos.par(gap.after = 10)
circos.par(start.degree = 20) #to start with Hazards
par(mar = c(1, 1, 1, 1))  # Adjust the margins
par(cex = 0.8)
chordDiagram(mylinks, column.col = colors, grid.col = colors, transparency = 0.3, annotationTrack = "grid", annotationTrackHeight = mm_h(1))
# Clear circular layout parameters
circos.clear()
dev.off()
# rename Systems at risk
colnames(links)[2] <- "Systems at risk"
rownames(links)[2] <- "Systems at risk"
# create matrix
mylinks <- as.matrix(links)
# The matrix needs to be symetric, ensuring  the values on the upper triangle of the matrix match the corresponding values on the lower triangle.
# use lower.tri() function to identify the lower triangle of the matrix, and then assign the corresponding values from the transposed matrix using t(symmetric_matrix). After making these changes, the matrix will be symmetric matrix. The diagonal elements are left unchanged, assuming they represent the connection of a group to itself (which should typically be zero). I
lower_triangular <- lower.tri(mylinks)
mylinks[upper.tri(mylinks)] <- 0
print(mylinks)
# Set colors for the plot
set.seed(999)
colors <- c("Hazards" = "#c7eae5",
"Systems at risk" =  "#5ab4ac",
"Goals" = "#01665e",
"Objectives" =  "#8c510a",
"Actions" = "#d8b365",
"Indicators" = "#f6e8c3")
# Create an image to store the graphic data
png("C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/phd-work/chapter-1/Results/Fig.Chordplot-noannot.png", width = 4, height = 4, units = "in", res = 300) #create the image to store the plot
# Plot
circos.par(gap.after = 10)
circos.par(start.degree = 20) #to start with Hazards
par(mar = c(1, 1, 1, 1))  # Adjust the margins
par(cex = 0.8)
chordDiagram(mylinks, column.col = colors, grid.col = colors, transparency = 0.3, annotationTrack = "grid", annotationTrackHeight = mm_h(1))
# Clear circular layout parameters
circos.clear()
dev.off()
# rename Systems at risk
colnames(links)[2] <- "Systems at risk"
rownames(links)[2] <- "Systems at risk"
# create matrix
mylinks <- as.matrix(links)
# The matrix needs to be symetric, ensuring  the values on the upper triangle of the matrix match the corresponding values on the lower triangle.
# use lower.tri() function to identify the lower triangle of the matrix, and then assign the corresponding values from the transposed matrix using t(symmetric_matrix). After making these changes, the matrix will be symmetric matrix. The diagonal elements are left unchanged, assuming they represent the connection of a group to itself (which should typically be zero). I
lower_triangular <- lower.tri(mylinks)
mylinks[upper.tri(mylinks)] <- 0
print(mylinks)
# Set colors for the plot
set.seed(999)
colors <- c("Hazards" = "#c7eae5",
"Systems at risk" =  "#5ab4ac",
"Goals" = "#01665e",
"Objectives" =  "#8c510a",
"Actions" = "#d8b365",
"Indicators" = "#f6e8c3")
# Create an image to store the graphic data
png("C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/phd-work/chapter-1/Results/Fig3.Chordplot-noannot.png", width = 4, height = 4, units = "in", res = 300) #create the image to store the plot
# Plot
circos.par(gap.after = 10)
circos.par(start.degree = 20) #to start with Hazards
par(mar = c(1, 1, 1, 1))  # Adjust the margins
par(cex = 0.8)
chordDiagram(mylinks, column.col = colors, grid.col = colors, transparency = 0.3, annotationTrack = "grid", annotationTrackHeight = mm_h(1))
# Clear circular layout parameters
circos.clear()
dev.off()
# rename Systems at risk
colnames(links)[2] <- "Systems at risk"
rownames(links)[2] <- "Systems at risk"
# create matrix
mylinks <- as.matrix(links)
# The matrix needs to be symetric, ensuring  the values on the upper triangle of the matrix match the corresponding values on the lower triangle.
# use lower.tri() function to identify the lower triangle of the matrix, and then assign the corresponding values from the transposed matrix using t(symmetric_matrix). After making these changes, the matrix will be symmetric matrix. The diagonal elements are left unchanged, assuming they represent the connection of a group to itself (which should typically be zero). I
lower_triangular <- lower.tri(mylinks)
mylinks[upper.tri(mylinks)] <- 0
print(mylinks)
# Set colors for the plot
set.seed(999)
colors <- c("Hazards" = "#c7eae5",
"Systems at risk" =  "#5ab4ac",
"Goals" = "#01665e",
"Objectives" =  "#8c510a",
"Actions" = "#d8b365",
"Indicators" = "#f6e8c3")
# Create an image to store the graphic data
png("C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/phd-work/chapter-1/Results/Fig3.Chordplot-noannot.png", width = 4, height = 4, units = "in", res = 330, bg = "transparent") #create the image to store the plot
# Plot
circos.par(gap.after = 10)
circos.par(start.degree = 20) #to start with Hazards
par(mar = c(1, 1, 1, 1))  # Adjust the margins
par(cex = 0.8)
chordDiagram(mylinks, column.col = colors, grid.col = colors, transparency = 0.3, annotationTrack = "grid", annotationTrackHeight = mm_h(1))
# Clear circular layout parameters
circos.clear()
dev.off()
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/phd-work/chapter-1/Data-Raw/")
linkages <- read.csv(file = "LInkagesRaw.csv", fileEncoding = "Windows-1252")
linkages_new <- linkages %>%
mutate_at(vars(5:19), ~ifelse(. == "yes", 1,
ifelse(. == "no link", 0, "")))
# library(stringr)
library(tidyr)
library(dplyr)
setwd("C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/phd-work/chapter-1/Data-Raw/")
linkages <- read.csv(file = "LInkagesRaw.csv", fileEncoding = "Windows-1252")
linkages_new <- linkages %>%
mutate_at(vars(5:19), ~ifelse(. == "yes", 1,
ifelse(. == "no link", 0, "")))
linkages_agg <- linkages_new %>%
group_by(Country, ISO3) %>%
summarise(across(HazardSystem:ActionIndicator, ~ifelse(any(. == 1), 1, 0)))
# Sample data
adaptdata <- data.frame(
#... [your dataframe here]
)
# Create an empty 6x6 matrix
nodes <- c("Hazard", "System", "Goal", "Objective", "Action", "Indicator")
adj_matrix <- matrix(0, nrow = 6, ncol = 6, dimnames = list(nodes, nodes))
# Extract the connection columns
connection_columns <- colnames(linkages_agg)[5:ncol(linkages_agg)]
# Define a function to map column names to nodes
map_columns_to_nodes <- function(column_name) {
unlist(strsplit(column_name, split = "(?<=\\w)(?=\\p{Lu})", perl = TRUE))
}
# Fill in the matrix using your data
for (colname in connection_columns) {
nodes_involved <- map_columns_to_nodes(colname)
connection_value <- sum(linkages_agg[[colname]], na.rm = TRUE)
if (!identical(nodes_involved[1], nodes_involved[2])) {
adj_matrix[nodes_involved[1], nodes_involved[2]] <- connection_value
adj_matrix[nodes_involved[2], nodes_involved[1]] <- connection_value
}
}
# Adjusting values for problematic entries
adj_matrix["Hazard", "System"] <- sum(linkages_agg$HazardSystem, na.rm = TRUE)
adj_matrix["System", "Hazard"] <- sum(linkages_agg$HazardSystem, na.rm = TRUE)
adj_matrix["Hazard", "Goal"] <- sum(linkages_agg$HazardGoal, na.rm = TRUE)
adj_matrix["Goal", "Hazard"] <- sum(linkages_agg$HazardGoal, na.rm = TRUE)
# Print the adjacency matrix
print(adj_matrix)
write.csv(adj_matrix,"C:/Users/anowak/OneDrive - CGIAR/Desktop/Repositories/phd-work/chapter-1/Data-Processed/LinkagesProcessed.csv")
linkages_agg_total <-
linkages_agg %>%
ungroup() %>%
mutate(count_1s = rowSums(select(., HazardSystem:ActionIndicator) == 1))
